import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { AppRouterCacheProvider } from "@mui/material-nextjs/v15-appRouter";
import { Roboto } from 'next/font/google';
import { ThemeProvider } from '@mui/material/styles';
import theme from './theme';
import { Config, ConfigProvider } from "./providers/ConfigProvider";

const roboto = Roboto({
  weight: ['300', '400', '500', '700'],
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-roboto',
});

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

function createConfig(): Config {
  const apiHost = process.env.NEXT_PUBLIC_API_HOST || 'localhost';
  const apiProtocol = process.env.NEXT_PUBLIC_API_PROTOCOL || 'http';
  const apiPort = process.env.NEXT_PUBLIC_API_PORT || '5112';

  return {
    apiHost,
    apiProtocol,
    apiPort,
    get apiUrl() {
      return `${apiProtocol}://${apiHost}:${apiPort}`;
    },
  };
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  
  const config = createConfig();

  return (
    <html lang="en" className={roboto.variable}>
      <body className={`${geistSans.variable} ${geistMono.variable}`}>
        <ConfigProvider config={config}>
          <AppRouterCacheProvider>
            <ThemeProvider theme={theme}>
              {children}
            </ThemeProvider>
          </AppRouterCacheProvider>
        </ConfigProvider>
      </body>
    </html>
  );
}
