import type { Metadata } from 'next';
import { Geist, Geist_Mono } from 'next/font/google';
import './globals.css';
import { AppRouterCacheProvider } from '@mui/material-nextjs/v15-appRouter';
import { Roboto } from 'next/font/google';
import { ThemeProvider } from '@mui/material/styles';
import theme from './theme';
import { Config, ConfigProvider } from './providers/ConfigProvider';
import ClientLocalizationProvider from './providers';
import { GlobalStyles } from '@mui/material';

const roboto = Roboto({
  weight: ['300', '400', '500', '700'],
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-roboto',
});

const geistSans = Geist({
  variable: '--font-geist-sans',
  subsets: ['latin'],
});

const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin'],
});

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

function createConfig(): Config {
  console.log('env API_HOST:', process.env.API_HOST);
  const apiHost = process.env.API_HOST || 'localhost';
  const apiProtocol = process.env.API_PROTOCOL || 'http';
  const apiPort = process.env.API_PORT || '5112';

  return {
    apiHost,
    apiProtocol,
    apiPort,
    get apiUrl() {
      return `${apiProtocol}://${apiHost}:${apiPort}`;
    },
  };
}
export const dynamic = 'force-dynamic';
export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const config = createConfig();

  console.log('Config in RootLayout:', config);
  return (
    <html lang="en" className={roboto.variable}>
      <head>
        <link rel="manifest" href="/manifest.json" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1.0, maximum-scale=1.0"
        />
      </head>
      <body className={`${geistSans.variable} ${geistMono.variable}`}>
        <GlobalStyles
          styles={{
            '@keyframes backgroundPan': {
              '0%': {
                transform: 'scale(1.2) translate(0, 0)',
              },
              '50%': {
                transform: 'scale(1.2) translate(10px, 10px)',
              },
              '100%': {
                transform: 'scale(1.2) translate(0, 0)',
              },
            },
          }}
        />
        <ConfigProvider config={config}>
          <AppRouterCacheProvider>
            <ThemeProvider theme={theme}>
              <ClientLocalizationProvider>
                {children}
              </ClientLocalizationProvider>
            </ThemeProvider>
          </AppRouterCacheProvider>
        </ConfigProvider>
      </body>
    </html>
  );
}
